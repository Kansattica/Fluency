Def(Main).Dup().Concat(": ").Concat()
            \.ParseInt().IsPrime()./
            
Def(IsPrime, int n).Dup().Infinite().Comment("endless n").DivMod().Com().SwitchIn(false)
                    \.SqrtIfLarge().CountupR().Comment("")./ \.Equals(0).Any().Not()./


// the square root thing doesn't work if the numbers are less than 10 or so, so
Def(SqrtIfLarge, int n).Dup().LessThan(11).MergeTop().SwitchIn()
                          \.Dup().Com("just n")./  Up()./
                            \.Sqrt().Floor().Add(1)./

Def(NCopies).Infinite().FirstN()

Def(Infinite).Dup().MergeTop()
              \.Infinite()./

// Countdown needs to finish in order to stop recursing, so this:
// sends one incoming value to Countdown
// Countdown sends its output out through MergeTop, as well as a Finished that makes MergeTop start reading from the bottom
// The console or whoever keeps requesting values from MergeTop, which now requests from the bottom
// The requests go to the recursive call to Next(), which gets expanded and has a Countdown that isn't finished.
// That Countdown takes a number from input, and the cosmic ballet goes on.

// NextCount-type semantics are now implemented in the interpreter for functions with declared arguments, this is obsolete.
Def(NextCount).First().Countdown().MergeTop()
                     \.NextCount()./
        
//Countdown takes a number (such as 5) and returns all numbers between that number and one, inclusive (such as 5 4 3 2 1)
Def(Countdown, int n).Dup().Comment("n goes here").I().MergeTop()
                          \.Dup().Equals(1).Not().MergeIf()./ //note that even when the number here equals one, one will still be returned across the top
                            \.Add(-1).Countdown()./

// but if we're looking for prime numbers, we want to turn 5 into 4 3 2
// (really, you want to go from 2 to the square root, but we're not there yet)
Def(CountdownR, int n).Dup().Comment("n-1").Add(-1).MergeTop() 
                          \.Dup().Equals(3).Not().MergeIf()./
                            \.Add(-1).CountdownR()./


Def(CountupR, int n).Add(-1).Dup().Comment("n-1     ").MergeBottom() //Notice that the only difference is using Bottom instead of Top!
                             \.Dup().LessThan(3).Not().MergeIf()./
                                   \.CountupR().Comment()./

// these were supposed to be named CountdownRestricted and CountupRestricted, since they returna subset of the "full" count
// but naming is an art in Fluency, because the names have to be long enough to be useful to the human and connect to things in the program
// but a function name that's too long is literally unwieldy to use

// Something interesting to note here: Countdown provides the values as they're computed, then does a bunch of expansions at the end until it hits the base case
// But Countup does the opposite because of that MergeBottom- expanding all the recursive calls first, then streaming the results out.
// You want to start with the low numbers when looking for primes because 2 is more likely to give you a useful answer than n-1
// but you also want to avoid using as much stack space as possible, so if you can only do as many recursions as you need, like Countdown does, that's a win
// I think it's possible to get the best of both worlds, but that is for when I'm more awake.